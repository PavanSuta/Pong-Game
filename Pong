# Implementation of classic arcade game Pong
#CopyRight PavanSuta
import simplegui
import random

# initialize globals - pos and vel encode vertical info for paddles
WIDTH = 600
HEIGHT = 400       
BALL_RADIUS = 20
PAD_WIDTH = 8
PAD_HEIGHT = 80
HALF_PAD_WIDTH = PAD_WIDTH / 2
HALF_PAD_HEIGHT = PAD_HEIGHT / 2
LEFT = False
RIGHT = True
direction = True #Direction = true for Right movement of ball elese left
ball_pos = [WIDTH/2, HEIGHT/2]
ball_vel = [0,0]
paddle1_pos = HEIGHT/2
paddle2_pos = HEIGHT/2
paddle1_vel = 0
paddle2_vel = 0
paddle_speed = 5
player2 = 0
player1 = 0


# initialize ball_pos and ball_vel for new bal in middle of table
# if direction is RIGHT, the ball's velocity is upper right, else upper left
def spawn_ball(direction):
    global ball_pos, ball_vel # these are vectors stored as lists
    ball_pos = [WIDTH/2, HEIGHT/2]
    if direction:
        ball_vel = [random.randrange(2, 5) , -(random.randrange(2, 5))]
    else:
        ball_vel = [ -(random.randrange(2, 5)) , -(random.randrange(2, 5))]


# define event handlers
def new_game():
    global paddle1_pos, paddle2_pos, paddle1_vel, paddle2_vel  # these are numbers
    global score1, score2  # these are ints
    score1 = 0
    score2 = 0
    paddle1_pos = HEIGHT/2
    paddle2_pos = HEIGHT/2
    paddle1_vel = 0
    paddle2_vel = 0
    direction = True
    spawn_ball(direction)
   
    

def draw(canvas):
    global score1, score2, paddle1_pos, paddle2_pos, ball_pos, ball_vel,paddle1_vel,paddle2_vel,player2,player1
        
    # draw mid line and gutters
    canvas.draw_line([WIDTH / 2, 0],[WIDTH / 2, HEIGHT], 1, "White")
    canvas.draw_line([PAD_WIDTH, 0],[PAD_WIDTH, HEIGHT], 1, "White")
    canvas.draw_line([WIDTH - PAD_WIDTH, 0],[WIDTH - PAD_WIDTH, HEIGHT], 1, "White")
    
        
    # Draw ball and update ball
    canvas.draw_circle(ball_pos,BALL_RADIUS,3,"White","Red") 
    ball_pos[0] = ball_pos[0] + ball_vel[0]
    ball_pos[1] = ball_pos[1] + ball_vel[1]
            
    
    
    # update paddle's vertical position, keep paddle on the screen
    if paddle1_pos + paddle1_vel >= HALF_PAD_HEIGHT and paddle1_pos + paddle1_vel <= HEIGHT - HALF_PAD_HEIGHT:
        paddle1_pos += paddle1_vel
        
    if paddle2_pos + paddle2_vel >= HALF_PAD_HEIGHT and paddle2_pos + paddle2_vel <= HEIGHT - HALF_PAD_HEIGHT:
        paddle2_pos += paddle2_vel

    
    # draw paddles
    canvas.draw_line([HALF_PAD_WIDTH,(paddle1_pos - HALF_PAD_HEIGHT)],[HALF_PAD_WIDTH,
                     (paddle1_pos + HALF_PAD_HEIGHT)],PAD_WIDTH,"White")
    
    canvas.draw_line([(WIDTH-HALF_PAD_WIDTH),(paddle2_pos - HALF_PAD_HEIGHT)],[(WIDTH-HALF_PAD_WIDTH),
                     (paddle2_pos + HALF_PAD_HEIGHT)],PAD_WIDTH,"White")

                                                                    
    
    # determine whether paddle and ball collide 
    # If ball is moving left side (checking if it hits the left gutter)
    if ball_pos[0] <= PAD_WIDTH + BALL_RADIUS:
        #if ball is hitting the left paddle 
        if paddle1_pos - HALF_PAD_HEIGHT <= ball_pos[1] <= paddle1_pos + HALF_PAD_HEIGHT:
            ball_vel[0] = -ball_vel[0]
            #Increment the speed by 10%
            ball_vel[0] += ball_vel[0] * 0.1
            ball_vel[1] += ball_vel[1] * 0.1
        else:    # draw scores
            player2 += 1
            direction = True
            spawn_ball(direction)
            
        # determine whether paddle and ball collide 
    # If ball is moving Right side (checking if it hits the Right gutter)
    if ball_pos[0] >= WIDTH - 1- PAD_WIDTH - BALL_RADIUS:
        #if ball is hitting the left paddle 
        if paddle2_pos - HALF_PAD_HEIGHT <= ball_pos[1] <= paddle2_pos + HALF_PAD_HEIGHT:
            ball_vel[0] = -ball_vel[0]
            #Increment the speed by 10%
            ball_vel[0] += ball_vel[0] * 0.1
            ball_vel[1] += ball_vel[1] * 0.1
        else:    # draw scores
            player1 += 1
            direction = False
            spawn_ball(direction) 
            
        #Preventing ball going out of the campus from top or bottom
    if ball_pos[1] <= BALL_RADIUS or ball_pos[1] >= HEIGHT-1-BALL_RADIUS:
        
        ball_vel[1] = - ball_vel[1]
            
    # updating scores on canvas
    canvas.draw_text('Player_X:' +' ' + str(player1), (100, 100), 36, 'Red')
    canvas.draw_text('Player_Y:' +' ' + str(player2), (360, 100), 36, 'Red')
   

                 
            
            
                
                
        
        
        
def keydown(key):
    global paddle1_vel, paddle2_vel
    if key == simplegui.KEY_MAP["w"]:
        paddle1_vel = paddle1_vel - paddle_speed 
    elif key == simplegui.KEY_MAP["s"]:
         paddle1_vel = paddle1_vel + paddle_speed
    if key == simplegui.KEY_MAP["up"]:
        paddle2_vel = paddle2_vel - paddle_speed 
    elif key == simplegui.KEY_MAP["down"]:
          paddle2_vel = paddle2_vel + paddle_speed         

        
        
def keyup(key):
    global paddle1_vel, paddle2_vel
    if key == simplegui.KEY_MAP["w"]:
         paddle1_vel = paddle1_vel  + paddle_speed
    elif key == simplegui.KEY_MAP["s"]:
          paddle1_vel = paddle1_vel - paddle_speed 
    elif key == simplegui.KEY_MAP["up"]:
          paddle2_vel = paddle2_vel  + paddle_speed
    elif key == simplegui.KEY_MAP["down"]:
          paddle2_vel = paddle2_vel - paddle_speed         
           


# create frame
frame = simplegui.create_frame("Pong", WIDTH, HEIGHT)
frame.set_draw_handler(draw)
frame.set_keydown_handler(keydown)
frame.set_keyup_handler(keyup)


# start frame
new_game()
frame.start()
